@page "/examplecomponent"

@using BlazorWebAssemblyUI.Services
@using BlazorWebAssemblyUI.Models
@inject ExampleModelService ExampleModelService

<h3 class="text-center">Example Models</h3>

@if (exampleModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Model Name</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in exampleModels)
                {
                    <tr>
                        <td>@model.Name</td>
                        <td>@model.Description</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => ShowUpdateForm(model)">Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteExampleModel(model.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="ShowCreateForm">Create New Item</button>
    <button class="btn btn-secondary" @onclick="FetchExampleModels">Refresh</button>
</div>

@if (isFormVisible)
{
    <div class="mt-3">
        <h4>@modalTitle</h4>
        <div class="mb-3">
            <label for="modelName" class="form-label">Model Name</label>
            <input type="text" class="form-control" id="modelName" @bind="currentModel.Name" />
        </div>
        <div class="mb-3">
            <label for="modelDescription" class="form-label">Description</label>
            <input type="text" class="form-control" id="modelDescription" @bind="currentModel.Description" />
        </div>
        <div class="mb-3">
            <label for="createdDate" class="form-label">Created Date</label>
            <input type="datetime-local" class="form-control" id="createdDate" @bind="currentModel.CreatedDate" />
        </div>
        <button class="btn btn-primary" @onclick="SaveModel">Save changes</button>
        <button class="btn btn-secondary" @onclick="HideForm">Cancel</button>
        <p class="text-danger mt-3">@message</p>
    </div>
}

@code {
    private List<ExampleModel> exampleModels;
    private ExampleModel currentModel = new ExampleModel();
    private bool isCreateMode = true;
    private bool isFormVisible = false;
    private string modalTitle = "Create New Item";
    public string message = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchExampleModels();
    }

    private async Task FetchExampleModels()
    {
        exampleModels = await ExampleModelService.GetAllExampleModels();
    }

    // Show Create Form
    private void ShowCreateForm()
    {
        currentModel = new ExampleModel
            {
                CreatedDate = DateTime.Now // Set default CreatedDate to the current date and time
            };
        modalTitle = "Create New Item";
        isCreateMode = true;
        isFormVisible = true;
    }

    // Show Update Form
    private void ShowUpdateForm(ExampleModel model)
    {
        currentModel = new ExampleModel
            {
                Id = model.Id,
                Name = model.Name,
                Description = model.Description,
                CreatedDate = model.CreatedDate
            };
        modalTitle = "Update Item";
        isCreateMode = false;
        isFormVisible = true;
    }

    // Hide form
    private void HideForm()
    {
        isFormVisible = false;
        message = "";
    }

    // Save model (Create or Update)
    private async Task SaveModel()
    {
        // Ensure all required fields are set
        if (string.IsNullOrWhiteSpace(currentModel.Name) ||
            string.IsNullOrWhiteSpace(currentModel.Description) ||  // Ensure Description is set
            currentModel.CreatedDate == default)
        {
            message = "Missing required fields.";
            return;
        }

        // Debugging output to verify Description value
        Console.WriteLine($"Updating Model: Id = {currentModel.Id}, Name = {currentModel.Name}, Description = {currentModel.Description}");

        HttpResponseMessage response;

        if (isCreateMode)
        {
            response = await ExampleModelService.AddExampleModel(currentModel);
        }
        else
        {
            response = await ExampleModelService.UpdateExampleModel(currentModel.Id, currentModel);
        }

        if (response.IsSuccessStatusCode)
        {
            await FetchExampleModels(); // Refresh list
            HideForm(); // Hide form after success
        }
        else
        {
            message = "Error: " + response.ReasonPhrase;
        }
    }

    private async Task DeleteExampleModel(int id)
    {
        var response = await ExampleModelService.DeleteExampleModel(id);

        if (response.IsSuccessStatusCode)
        {
            await FetchExampleModels(); // Refresh the list
        }
        else
        {
            message = "Error deleting model: " + response.ReasonPhrase;
        }
    }
}
